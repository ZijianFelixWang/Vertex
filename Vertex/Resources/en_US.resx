<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BeginConstructXMLInfo" xml:space="preserve">
    <value>Begin construction of output XML document</value>
  </data>
  <data name="CCAResetedInfo" xml:space="preserve">
    <value>Automata status reseted successfully.</value>
  </data>
  <data name="CellsSyncInfo" xml:space="preserve">
    <value>Syncing Cells data...</value>
  </data>
  <data name="CellsUpdatedInfo" xml:space="preserve">
    <value>All cells updated.</value>
  </data>
  <data name="CurrentRankingHint" xml:space="preserve">
    <value>CurrentRanking= </value>
  </data>
  <data name="CurRulUnsuccessfulHint" xml:space="preserve">
    <value>Unsuccessful CurRule= </value>
  </data>
  <data name="CVPHint" xml:space="preserve">
    <value>CrossOverPoint is </value>
  </data>
  <data name="DragAndDropInfo" xml:space="preserve">
    <value>Drag&amp;Drop the source file here, and then hit enter. You can also enter the file's location manually.</value>
  </data>
  <data name="DynamicViewerErrorHint" xml:space="preserve">
    <value>Unexpected error happened when initializing DynamicViewer: </value>
  </data>
  <data name="DynamicViewerSuccessHint" xml:space="preserve">
    <value>Successfully initialized DynamicViewer at </value>
  </data>
  <data name="EndXMLConstructionInfo" xml:space="preserve">
    <value>XML construction done.</value>
  </data>
  <data name="EnterMainLoopHint" xml:space="preserve">
    <value>Enter main loop...</value>
  </data>
  <data name="EnvFileHint" xml:space="preserve">
    <value>Environment profile: </value>
  </data>
  <data name="EnvFileParsingDoneInfo" xml:space="preserve">
    <value>Environment file parsing done successfully.</value>
  </data>
  <data name="EnvSyntaxError" xml:space="preserve">
    <value>XML Syntax error. Details: </value>
  </data>
  <data name="EvaluatingHint" xml:space="preserve">
    <value>Evaluating rule: </value>
  </data>
  <data name="ExecutionHint" xml:space="preserve">
    <value>Execute[</value>
  </data>
  <data name="ExitConfirm" xml:space="preserve">
    <value>Press ENTER key to close this window.</value>
  </data>
  <data name="ExportRuleErrorHint" xml:space="preserve">
    <value>Failed to open export file to save resulted rule: </value>
  </data>
  <data name="ExportRuleHint" xml:space="preserve">
    <value>Exporting resulted rule to file: </value>
  </data>
  <data name="ExportRuleSuccessInfo" xml:space="preserve">
    <value>Exported resulted rule to file successfully.</value>
  </data>
  <data name="ExportRuleXMLCommentContent" xml:space="preserve">
    <value>User should complete this configuration</value>
  </data>
  <data name="ExportSVGHint" xml:space="preserve">
    <value>Exporting SVG file to: </value>
  </data>
  <data name="ExportSVGSnapshotHead" xml:space="preserve">
    <value>Exporting SVG Snapshot to </value>
  </data>
  <data name="ExportSVGSuccessInfo" xml:space="preserve">
    <value>SVG file exported successfully.</value>
  </data>
  <data name="FinalSuccessInfo" xml:space="preserve">
    <value>Has successfully generated the executable rule.</value>
  </data>
  <data name="G0OKInfo" xml:space="preserve">
    <value>Generating G0 done.</value>
  </data>
  <data name="G1OKInfo" xml:space="preserve">
    <value>Generating G1 done.</value>
  </data>
  <data name="NoNetworkingFeatureWarn" xml:space="preserve">
    <value>This version doesn't support networking. This line of configuration is ignored.</value>
  </data>
  <data name="NotImplementedHint" xml:space="preserve">
    <value>Some feature is not implemented now. Details:</value>
  </data>
  <data name="NotSupportedError" xml:space="preserve">
    <value>Something is not supported now. Details: </value>
  </data>
  <data name="NoValidParamError" xml:space="preserve">
    <value>No '--feature' parameter specified for program.</value>
  </data>
  <data name="ProduceRuleInfo" xml:space="preserve">
    <value>Producing new rule from history.</value>
  </data>
  <data name="RankingDecHint" xml:space="preserve">
    <value>-1 </value>
  </data>
  <data name="RankingIncHint" xml:space="preserve">
    <value>+1 </value>
  </data>
  <data name="ReferToHelpIndication" xml:space="preserve">
    <value>For help information. use 'vertex.exe --help' instead.</value>
  </data>
  <data name="ResultedRuleHint" xml:space="preserve">
    <value>ResultedRule= </value>
  </data>
  <data name="RuleXMLSaveHint" xml:space="preserve">
    <value>Saving XML output to: </value>
  </data>
  <data name="StartEvolveVerbose" xml:space="preserve">
    <value>Starting Evolve feature...</value>
  </data>
  <data name="StartSVGExportInfo" xml:space="preserve">
    <value>Starting SVG export function.</value>
  </data>
  <data name="SVGExportSuccessInfo" xml:space="preserve">
    <value>SVGSnapshot file exported successfully.</value>
  </data>
  <data name="TasksConstructedInfo" xml:space="preserve">
    <value>Tasks construction OK.</value>
  </data>
  <data name="TasksDoneInfo" xml:space="preserve">
    <value>All tasks OK.</value>
  </data>
  <data name="TestFailureHint" xml:space="preserve">
    <value>Success = false for Index = </value>
  </data>
  <data name="TestSuccessHint" xml:space="preserve">
    <value>Success = true for Index = </value>
  </data>
</root>