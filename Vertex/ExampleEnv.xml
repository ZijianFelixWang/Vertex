<?xml version="1.0" encoding="utf-8" ?>

<!-- Copyright Zijian Wang 2021. All rights reserved. -->
<!-- This document is protected by the law of the PRC and international regulations about copyright. -->

<!--
Note that this XML configuration file should be checked with a XSD schema
before being used by the application. The schema which is called Env.xsd
generated by Visual Studio.
-->

<Environment id="ExampleEnvironment">
  <!-- This environment profile has an identifier called 'ExampleEnvironment' -->
  
  <!--
  Typically, an Environment description which is under
  tag Environment consists of the following parts:
    * Metadata: contains key-value pairs which defines
                basic configurations of the environment
                and the automata.
    * Evaluator:  contains configurations of the 
                  Evaluator and the validation algorithm
    * IO: contains detailed information and 
          configurations of IO aspect of the automata 
          and settings of the VCIO submodule.
  -->
  
  <Metadata>
    <!-- These key-value pairs configure the metadata of the environment -->
    
    <Meta key="VertexVersion" val="0.1"/> <!-- Mininum version of Vertex software to run this -->
    <Meta key="Visibility" val="public"/> <!-- If this environment is visible on the network -->
    <Meta key="CMSize" val="32x32"/>  <!-- The size of cellular matrix to be used [0-1023] -->
    <Meta key="ShowRealTimeMatrix" val="false"/>  <!-- Whether to show content of the matrix every time -->
    <Meta key="MultithreadingExecution" val="true"/>  <!-- Use multithreading when executes the matrix -->
    <Meta key="Terminal" val="127.0.0.1"/>  <!-- The terminal of this environment -->
    <Meta key="Networking" val="false"/>  <!-- Whether this automata can use network Vertex resources -->
    <Meta key="MutationMethod" val="flip"/> <!-- Defines the mutation method used by RulePool. Either 'flip' or 'random' -->
  </Metadata>
  
  <Evaluator>
    <!--
    In this example, if the automata can execute simple 
    'and' logic calculations correctly for more than 10 
    times, it can survive.
    
    Things EAM pays attention on: calculations the 
    automata can work out correctly.
    
    The schematics of the validation is to check whether
    opr_a AND opr_b EQUALS TO RESULT.
    
    Typically, an Evaluator needs to declare the things below:
      * Parameter list for input VCIOs
      * Answer list for output VCIOs
      * Way to validate the automata
      * Binding to a ReadyIndicator in order to shift examples
    
    IO configurations are loaded below.
    -->

    <!--
    Test examples: (Some ones appear for various times)
    0.  0 & 0 = 0
    1.  0 & 1 = 0
    2.  1 & 0 = 0
    3.  1 & 1 = 1
    4.  1 & 1 = 1
    5.  0 & 0 = 0
    6.  1 & 0 = 0
    7.  0 & 1 = 0
    8.  0 & 0 = 0
    9.  1 & 1 = 1
    -->
    
    <!-- Parameter list for opr_a -->
    <ParameterList for="opr_a">
      <!--
      Usage: <Value index="Identifier" type="Datatype">
      [Data Content] </Value>
      -->
      
      <Value index="0" type="Bool"> false </Value>
      <Value index="1" type="Bool"> false </Value>
      <!--<Value index="2" type="Bool"> true </Value>
      <Value index="3" type="Bool"> true </Value>
      <Value index="4" type="Bool"> true </Value>
      <Value index="5" type="Bool"> false </Value>
      <Value index="6" type="Bool"> true </Value>
      <Value index="7" type="Bool"> false </Value>
      <Value index="8" type="Bool"> false </Value>
      <Value index="9" type="Bool"> true </Value>-->
    </ParameterList>

    <!-- Parameter list for opr_b -->
    <ParameterList for="opr_b">
      <Value index="0" type="Bool"> false </Value>
      <Value index="1" type="Bool"> true </Value>
      <!--<Value index="2" type="Bool"> false </Value>
      <Value index="3" type="Bool"> true </Value>
      <Value index="4" type="Bool"> true </Value>
      <Value index="5" type="Bool"> false </Value>
      <Value index="6" type="Bool"> false </Value>
      <Value index="7" type="Bool"> true </Value>
      <Value index="8" type="Bool"> false </Value>
      <Value index="9" type="Bool"> true </Value>-->
    </ParameterList>

    <AnswerList for="result">
      <!-- Definition for AnswerList -->

      <!-- Correct answer list for result -->
      <Value index="0" type="Bool"> false </Value>
      <Value index="1" type="Bool"> false </Value>
      <!--<Value index="2" type="Bool"> false </Value>
      <Value index="3" type="Bool"> true </Value>
      <Value index="4" type="Bool"> true </Value>
      <Value index="5" type="Bool"> false </Value>
      <Value index="6" type="Bool"> false </Value>
      <Value index="7" type="Bool"> false </Value>
      <Value index="8" type="Bool"> false </Value>
      <Value index="9" type="Bool"> true </Value>-->
    </AnswerList>

    <!-- 
    Here comes the binder to RI in order to let the Evaluator
    know when the automata is ready for validation.
    
    In the example below, the RIBinder points to RI declared in
    the IO tag. If it is ON, the Evaluator will check the 
    automata's generated answer. If it is OFF, the Evaluator will
    let the automata continue for calculation. If the RI is OFF 
    for over steps, the automata will be killed.
    -->
    <RIBinder indicator="RI" on="OK" off="Continue" timeout="1"/>
  </Evaluator>
  
  <IO>
    <!-- 
    Here comes the IO and VCIO definitions of the environment. 
    
    Input:  VCIO_0 for opr a, VCIO_1 for opr b.
    Output: VCIO_2 for result of 'and' calculation.
    Ready Indicator (If on then EAM will fetch the Output and
      give next Input): VCIO_3.
    
    Note that VCIO_3 is a special Inout type VCIO whose formal
    type name is 'ReadyIndicator'.
    
    Usage of IO tags: <Type id="Here comes the identifier (VCIO_x)" 
    name="Here comes the name of the variable mapped with the VCIO"
    execute="Whether the VCIO itself executes the rule generated"/>
    -->

    <Input id="VCIO_0" name="opr_a" execute="false"/>  <!-- Configures VCIO_0 -->
    <Input id="VCIO_1" name="opr_b" execute="false"/>  <!-- Configures VCIO_1 -->
    <Output id="VCIO_2" name="result" execute="true"/>  <!-- Configures VCIO_2 -->
    <ReadyIndicator id="VCIO_3" name="RI" execute="true"/>  <!-- Configures VCIO_3 -->

    <!-- Now configures the distribution method -->
    <!-- Only one method supported in this version: random -->
    <VCIODistribution method="random"/>
  </IO>
</Environment>